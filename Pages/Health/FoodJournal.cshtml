@page
@model EDP_Project.Pages.Health.FoodJournalModel
@{
    ViewData["Title"] = "Health Tracking - Your Food Journal";
}
<link href="https://unpkg.com/bootstrap-table@1.19.1/dist/bootstrap-table.min.css" rel="stylesheet">

<h1>My Food Journal</h1>
<br />

@if (!Model.RecordExists)
{
    <h5>You have yet to add your record for today. </h5>
    <a href="#AddSection" data-toggle="collapse" class="btn btn-info btn-lg"><i class="fas fa-plus"></i> Add record to journal</a>
}
else
{
    <div class="card container" id="recordExistedCard">
        <h3>Today's record</h3>
        @{ string[] mealTypes = { "Breakfast", "Lunch", "Dinner" };}
        @foreach (var type in mealTypes)
        {
            <div>
                <h5>@type</h5>
                <p class="health-todayRecord-li" style="padding-left:2.5%;">
                    @for (var i = 0; i < Model.TodayRecord.Where(x => x.MealType == type).ToList().Count; i++)
                    {
                        var meal = Model.TodayRecord.Where(x => x.MealType == type).ToList()[i];
                        <span>
                            @if (i > 0)
                            {
                                <span>,</span>
                            }
                            @meal.FoodDetails.FoodName
                            @if (meal.Quantity > 1)
                            {
                                <span>x @meal.Quantity</span>
                            }
                        </span>

                    }
                </p>
            </div>
        }

        <div class="row ml-auto" style="padding:15px 30px;">
            <div class="float-right col-xs-6">
                <a href="#EditSection" data-toggle="collapse" class="btn btn-warning"><i class="far fa-edit"></i> Edit</a>
            </div>
            <div class="float-right col-xs-6">
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteRecord"><i class="fa fa-trash"></i> Reset</button>
                <!-- The Modal -->
                <div class="modal" id="confirmDeleteRecord">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Delete Confirmation</h4>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>

                            <div class="modal-body">
                                <p>Are you sure you want to reset today's record</p>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <a asp-page="DeleteFoodRecord" asp-route-userId="@Model.UserId" class="btn btn-danger">Reset</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<br />

<div id="FormSection">
    <div class="collapse card" id="AddSection">
        <form id="addFood-form" method="post">
            <table class="table table-borderless" id="health-addFood-table">
                <tr>
                    <td>
                        <h5>Date</h5>
                        <input type="date" asp-for="Date" class="form-control" id="health-addFood-date" />
                        <div asp-validation-summary="All" class="text-danger"></div>
                    </td>
                    <td colspan="3"></td>
                </tr>

                @for (var i = 0; i < Model.MealsModel.Count; i++)
                {
                    <tr class="addFood-tr">
                        <td class="align-top" style="width: 30%">
                            <h5>@Model.MealsModel[i].MealType</h5>
                        </td>
                        <td id="health-addFood-table-td2" style="width: 40%">
                            <div class="health-addFood-inputGroup" id="addSection-@Model.MealsModel[i].MealType">
                                <div class="dropdown health-addFood-nameInput">
                                    <div class="health-addFood-input">
                                        <div class="form-group">
                                            <label>Meal</label>
                                            <div class="form-control health-addFood-displayInput" onclick="OpenOptions(this); return false;" style="margin-bottom: 1%; cursor: text;"></div>
                                        </div>

                                        <input type="text" asp-for="MealsModel[i].MealType" value="@Model.MealsModel[i].MealType" hidden readonly />
                                        <input type="text" asp-for="MealsModel[i].FoodId" class="form-control foodId-field" hidden readonly />

                                    </div>
                                </div>
                            </div>

                            <button class="btn btn-outline-info" onclick="AddInput(@i+1); return false;" style="margin-bottom: 2%;"><i class="fas fa-plus-circle"></i> Add another food</button>
                            <p>Calories: <span class="health-addFood-calories-span">0</span></p>
                        </td>
                        <td style="width: 10%">
                            <div class="form-group health-addFood-quantity">
                                <label>Quantity</label>
                                <input type="number" asp-for="MealsModel[i].Quantity" value="1" min="0" class="form-control addFood-quantity-input" style="margin-bottom: 5%;" />
                            </div>
                        </td>
                        <td style="width: 20%">
                            <div style="margin-top: 32px;"></div>
                            <button class="btn text-secondary" style="margin-bottom: 2.5%;" disabled><i class="far fa-times-circle"></i></button>
                        </td>
                    </tr>
                }

                <tr>
                    <td></td>
                    <td><h5>Net calories intake: <span id="health-addFood-totalCalories">0</span></h5></td>
                    <td colspan="2">
                        <div class="float-right">
                            <a href="#EditSection" data-toggle="collapse" class="btn btn-secondary">Cancel</a>
                            <button onclick="OnSubmit(); return false;" class="btn btn-success">Add to journal</button>
                        </div>
                    </td>
                </tr>
            </table>


            <table id="foodCaloriesTable" hidden>
                @foreach (var food in Model.AllFood)
                {
                    <tr>
                        <td>@food.FoodId</td>
                        <td>@food.Calories</td>
                    </tr>
                }
            </table>
        </form>
    </div>
    <div class="collapse card" id="EditSection">
        <form id="addFood-form" method="post">
            <table class="table table-borderless" id="health-addFood-table">
                <tr>
                    <td>
                        <h5>Date</h5>
                        <input type="date" asp-for="Date" class="form-control" id="health-addFood-date" value="@Model.Date.ToString("yyyy-MM-dd")" />
                        <div asp-validation-summary="All" class="text-danger"></div>
                    </td>
                    <td colspan="3"></td>
                </tr>

                @{ int count = 0;}
                @for (var i = 0; i < Model.MealsModel.Count; i++)
                {
                    <tr class="addFood-tr">
                        <td class="align-top" style="width: 30%">
                            <h5>@Model.MealsModel[i].MealType</h5>
                        </td>
                        <td id="health-addFood-table-td2" style="width: 40%">
                            <div class="health-addFood-inputGroup" id="addSection-@Model.MealsModel[i].MealType">
                                @{ var currentMeal = Model.TodayRecord.Where(x => x.MealType == Model.MealsModel[i].MealType).ToList(); }
                                @for (var j = 0; j < currentMeal.Count; j++)
                                {
                                    <div class="dropdown health-addFood-nameInput">
                                        <div class="health-addFood-input">
                                            <div class="form-group">
                                                @if (j == 0)
                                                {
                                                    <label>Meal</label>
                                                }

                                                <div class="form-control health-addFood-displayInput" onclick="OpenOptions(this); return false;" style="margin-bottom: 1%;cursor: text;">@currentMeal[j].FoodDetails.FoodName</div>
                                            </div>

                                            <input type="text" asp-for="MealsModel[j].MealType" value="@Model.MealsModel[i].MealType" hidden readonly />
                                            <input type="text" asp-for="MealsModel[j].FoodId" value="@currentMeal[j].FoodId" class="form-control foodId-field" hidden readonly />
                                            <input type="text" asp-for="MealsModel[j].Id" value="@currentMeal[j].Id" class="itemId-field" hidden readonly />

                                            @{ count++;}
                                        </div>
                                    </div>
                                }

                            </div>

                            <button class="btn btn-outline-info" onclick="AddInput(@i+1); return false;" style="margin-bottom: 2%;"><i class="fas fa-plus-circle"></i> Add another food</button>
                            <p>Calories: <span class="health-addFood-calories-span">0</span></p>
                        </td>
                        <td style="width: 10%">
                            @for (var j = 0; j < currentMeal.Count; j++)
                            {
                                <div class="form-group health-addFood-quantity">
                                    @if (j == 0)
                                    {
                                        <label>Quantity</label>
                                    }
                                    <input type="number" asp-for="MealsModel[i].Quantity" value="@currentMeal[j].Quantity" min="0" class="form-control addFood-quantity-input" style="margin-bottom: 5%;" />
                                </div>
                            }

                        </td>
                        <td style="width: 20%">
                            <div style="margin-top: 32px;"></div>
                            @for (var j = 0; j < currentMeal.Count; j++)
                            {
                                if (j > 0)
                                {
                                    <br />
                                    <button class="btn text-primary" onclick="RemoveInput(this); return false;" style="margin-bottom: 2.5%;margin-top: 11px;"><i class="far fa-times-circle"></i></button>
                                }
                                else
                                {
                                    <button class="btn text-primary" onclick="RemoveInput(this); return false;" style="margin-bottom: 2.5%;"><i class="far fa-times-circle"></i></button>
                                }

                            }
                        </td>
                    </tr>
                }

                <tr>
                    <td></td>
                    <td><h5>Net calories intake: <span id="health-addFood-totalCalories">0</span></h5></td>
                    <td colspan="2">
                        <div class="float-right">
                            <a href="#EditSection" data-toggle="collapse" class="btn btn-secondary">Cancel</a>
                            <button onclick="OnSubmit(); return false;" class="btn btn-success">Add to journal</button>
                        </div>
                    </td>
                </tr>
            </table>


            <table id="foodCaloriesTable" hidden>
                @foreach (var food in Model.AllFood)
                {
                    <tr>
                        <td>@food.FoodId</td>
                        <td>@food.Calories</td>
                    </tr>
                }
            </table>
        </form>
    </div>
</div>
<br />

<div id="tempRecordExistsVal">@Model.RecordExists</div>
<div id="DropdownList" class="health-addFood-selectList dropdown-menu" style="display:none;">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a href="#LightMealList" data-toggle="tab" class="nav-link active">Light Meals</a>
        </li>
        <li class="nav-item">
            <a href="#HeavyMealList" data-toggle="tab" class="nav-link">Heavy Meals</a>
        </li>
        <li class="nav-item">
            <a href="#SnackList" data-toggle="tab" class="nav-link">Snacks</a>
        </li>
        <li class="nav-item">
            <a href="#DrinkList" data-toggle="tab" class="nav-link">Drinks</a>
        </li>
    </ul>

    <div class="tab-content">
        @*<input type="text" value="" class="form-control health-addFood-foodListSearch" placeholder="Type in food name..." style="margin:2.5%;width: 95%;" />*@

        @{ string[] categories = { "Light Meal", "Heavy Meal", "Snack", "Drink" };}
        @for (var i = 0; i < categories.Length; i++)
        {
            string tabId = categories[i].Replace(" ", "") + "List";
            if (i == 0)
            {
                <div class="tab-pane container-fluid active" id="@tabId">
                    @foreach (var food in Model.AllFood.Where(x => x.Category == categories[i]))
                    {
                        <div class="dropdown-item" onclick="AddFood(this);" style="cursor: pointer; margin: 8px 0;">
                            @food.FoodName <span hidden>@food.FoodId</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="tab-pane container-fluid" id="@tabId">
                    @foreach (var food in Model.AllFood.Where(x => x.Category == categories[i]))
                    {
                    <div class="dropdown-item" onclick="AddFood(this);" style="cursor:pointer;">
                        @food.FoodName <span hidden>@food.FoodId</span>
                    </div>
                    }
                </div>
            }

        }

    </div>

</div>

<div id="RecordsTable">
    <div class="col-4">
        <div id="toolbar">
            <select id="selectFilter" class="form-control" name="filterAlgorithm" onchange="getFilter(this)">
                <option value="All" selected>All</option>
            </select>
        </div>
    </div>
    <table id="meals_table"
           data-search="true"
           data-page-size="7"
           data-toolbar="#toolbar"
           data-pagination="true"
           data-side-pagination="server"
           data-filter-control="true"
           data-show-fullscreen="true"
           data-url="Table_getMeals">
        <thead>
            <tr>
                <th data-field="date" data-sortable="true">Date</th>
                <th data-field="breakfast" data-sortable="true">Breakfast</th>
                <th data-field="lunch" data-sortable="true">Lunch</th>
                <th data-field="dinner" data-sortable="true">Dinner</th>
            </tr>
        </thead>
    </table>
</div>

<script>
    var dropdownCooldown = false;

    var select = document.getElementById('selectFilter');

    $table = $("#meals_table");
    $(document).ready(function () {
        $table.bootstrapTable();
    });

    function OpenOptions(inp) {
        dropdownCooldown = true;
        var dropdownDiv = document.querySelector(".health-addFood-selectList").cloneNode(true);
        dropdownDiv.style.display = "block";

        var parentDiv = inp.parentElement.parentElement;
        var outerParentDiv = parentDiv.parentElement.parentElement;
        // Disabling options that are already selected
        var allInputsGrp = outerParentDiv.getElementsByClassName("health-addFood-nameInput");
        for (var i = 0; i < allInputsGrp.length; i++) {
            var foodIdField = allInputsGrp[i].querySelector(".foodId-field");
            var allCategories = dropdownDiv.getElementsByClassName("tab-pane");

            for (var j = 0; j < allCategories.length; j++) {
                var allListItem = allCategories[j].getElementsByClassName("dropdown-item");

                for (var k = 0; k < allListItem.length; k++) {
                    var dropdownValue = allListItem[k].querySelector("span").innerText;
                    if (dropdownValue == foodIdField.value) {
                        allListItem[k].style.color = "#6C757D";
                        allListItem[k].style.backgroundColor = "#DDDDDD";
                        allListItem[k].style.cursor = "default";
                        allListItem[k].removeAttribute("onclick");
                    }
                }
            }
        }

        parentDiv.appendChild(dropdownDiv);
        setTimeout(function () { dropdownCooldown = false; }, 126)
    }

    function AddInput(number) {
        var inputGroup = document.getElementsByClassName("health-addFood-inputGroup")[number - 1];

        var foodNameInputDiv = inputGroup.querySelector(".health-addFood-nameInput").cloneNode(true);
        foodNameInputDiv.querySelector(".health-addFood-displayInput").innerText = "";
        foodNameInputDiv.querySelector("label").remove();
        var itemIdField = foodNameInputDiv.querySelector(".itemId-field");
        if (itemIdField)
            itemIdField.remove();

        var foodIdInput = foodNameInputDiv.querySelector(".foodId-field");
        foodIdInput.readonly = false;
        foodIdInput.value = "";
        foodIdInput.readonly = true;
        inputGroup.appendChild(foodNameInputDiv);

        var td = document.getElementsByClassName("addFood-tr")[number - 1].getElementsByTagName("td");
        var quantityInput = document.querySelector(".health-addFood-quantity").cloneNode(true);
        quantityInput.querySelector("label").remove();
        quantityInput.querySelector("input").value = 1;
        td.item(2).appendChild(quantityInput);
        td.item(3).innerHTML +=
            `<br />
            <button class="btn text-primary" onclick="RemoveInput(this); return false;" style="margin-bottom: 2.5%;margin-top: 11px;"><i class="far fa-times-circle"></i></button>`;
        var firstBtn = td.item(3).querySelector("button")
        firstBtn.className = "btn text-primary";
        firstBtn.setAttribute("onclick", "RemoveInput(this); return false;")
        firstBtn.disabled = false;

        SetAspValues();

        $('#EditSection').removeData('validator').removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse('#EditSection');

    }

    function RemoveInput(button) {
        var tr = button.parentElement.parentElement;
        var allButtons = button.parentElement.querySelectorAll("button");

        if (allButtons.length == 2) {
            for (var i in allButtons) {
                var firstBtn = allButtons.item(i)
                firstBtn.className = "btn text-secondary";
                firstBtn.style.marginBottom = 0;
                firstBtn.removeAttribute("onclick");
                firstBtn.disabled = true;

                var nameInputFormGrp = tr.getElementsByClassName("health-addFood-nameInput").item(i).querySelector(".form-group");
                var quantityFormGrp = tr.getElementsByClassName("health-addFood-quantity").item(i);
                var mealLabel = document.createElement("label")
                mealLabel.innerText = "Meal";
                var quantityLabel = document.createElement("label")
                quantityLabel.innerText = "Quantity"
                if (!quantityFormGrp.querySelector("label")) {
                    nameInputFormGrp.insertBefore(mealLabel, nameInputFormGrp.querySelector(".health-addFood-displayInput"));
                    quantityFormGrp.insertBefore(quantityLabel, quantityFormGrp.querySelector(".addFood-quantity-input"));
                }
            }       
        }

        for (var i in allButtons) {
            if (allButtons[i] === button) {
                tr.getElementsByClassName("health-addFood-nameInput").item(i).remove();
                tr.getElementsByClassName("health-addFood-quantity").item(i).remove();
                if (i - 1 >= 0) {
                    button.parentElement.querySelectorAll("br").item(i - 1).remove();
                }
                else {
                    button.parentElement.querySelectorAll("br").item(0).remove();
                }
                break;
            }
        }
        button.remove();

        SetAspValues();
    }

    function AddFood(div) {
        var group = div.parentElement.parentElement.parentElement.parentElement;
        // Update name field
        group.getElementsByClassName("health-addFood-displayInput")[0].innerText = div.innerText;

        var idField = group.getElementsByTagName("input")[1]
        idField.readonly = false;
        idField.value = div.getElementsByTagName("span")[0].innerText;
        idField.readonly = true;
        div.parentElement.style.display = "none";

        div.parentElement.remove();
    }

    function SetAspValues() {
        var allInpGrp = document.getElementsByClassName("health-addFood-nameInput");
        var quantities = document.getElementsByClassName("addFood-quantity-input");

        for (var i = 0; i < allInpGrp.length; i++) {
            var inputs = allInpGrp.item(i).querySelectorAll("input");
            var index = parseInt(i);
            quantities.item(i).name = `MealsModel[${i}].Quantity`;
            quantities.item(i).id = `MealsModel_${i}__Quantity`;

            inputs.item(0).name = `MealsModel[${i}].MealType`;
            inputs.item(0).id = `MealsModel_${i}__MealType`;
            inputs.item(1).name = `MealsModel[${i}].FoodId`;
            inputs.item(1).id = `MealsModel_${i}__FoodId`;
            if (inputs.item(2)) {
                inputs.item(2).name = `MealsModel[${i}].Id`;
                inputs.item(2).id = `MealsModel_${i}__Id`;
            }
        }
    }

    function OnSubmit() {
        var allInputs = document.getElementsByClassName("health-addFood-displayInput");
        var valid = true;
        for (var i = 0; i < allInputs.length; i++) {
            var currInp = allInputs.item(i);
            var err_msg = currInp.parentElement.querySelector(".err_msg")
            if (err_msg) {
                err_msg.remove();
            }

            if (!allInputs.item(i).innerHTML) {
                var errMsg = document.createElement("span");
                errMsg.className = "err_msg text-danger";
                errMsg.innerText = "Please fill up your record here here";
                allInputs.item(i).parentElement.appendChild(errMsg);
                valid = false;
            }
        }

        if (valid) {
            document.getElementById("FormSection").querySelector("form").submit();
        }
    }

    function ListenersInterrupt() {
        // Listening for change in aria-expanded
        var foodCalories = {}; //Table of foodId: Calories

        function UpdateCalories() {
            var totalCalories = {
                "addSection-Breakfast": 0,
                "addSection-Lunch": 0,
                "addSection-Dinner": 0
            };

            var allInputs = document.getElementsByClassName("foodId-field");
            var allQuantity = document.getElementsByClassName("health-addFood-quantity");


            for (var i = 0; i < allInputs.length; i++) {
                var foodId = allInputs.item(i).value;

                if (foodId > 0) {
                    var inputSectionId = allInputs.item(i).parentElement.parentElement.parentElement.id;
                    totalCalories[inputSectionId] += foodCalories[allInputs.item(i).value] * allQuantity.item(i).querySelector("input").value;

                }

            }

            var netCalories = 0;
            for (var id in totalCalories) {
                document.getElementById(id).parentElement.parentElement.querySelector(".health-addFood-calories-span").innerText = totalCalories[id];
                netCalories += totalCalories[id];
            }
            document.querySelector("#health-addFood-totalCalories").innerText = netCalories;

        }

        function InitFunctions() {
            // Set calories values object
            var foodCaloriesTable = document.querySelector("#foodCaloriesTable");
            var allTr = foodCaloriesTable.querySelectorAll("tr");
            if (allTr) {
                for (var i in allTr) {
                    var allTd = allTr.item(i).querySelectorAll("td");
                    foodCalories[allTd[0].innerText] = parseInt(allTd[1].innerText);
                }
                foodCaloriesTable.remove();
            }

            // Set the correct form
            var recordExistsString = document.querySelector("#tempRecordExistsVal").innerText.toLowerCase()
            var recordExists = recordExistsString == "true";

            document.querySelector("#tempRecordExistsVal").remove();
            console.log(recordExists)
            if (recordExists) {
                document.querySelector("#AddSection").remove()
            }
            else {
                document.querySelector("#EditSection").remove()
            }
        }

        InitFunctions()
        setInterval(function () {
            var addSection = document.querySelector("#AddSection")
            if (!addSection) {
                addSection = document.querySelector("#EditSection")
            }
            var addSectionExpanded = addSection.classList.contains("show");

            // listening for change in input fields
            if (addSectionExpanded) {
                UpdateCalories();
            }
        }, 500);
    }

    var allInputsFields = document.querySelectorAll("input");
    for (var i = 0; i < allInputsFields.length; i++) {
        allInputsFields[i].addEventListener("change", function (e) {
            SetAspValues();
        });
    }

    // Close tabs when clicking anywhere
    window.addEventListener('load', function () {
        document.addEventListener('click', function (event) {
            if (event.target.getAttribute("type") != "submit" && event.target.tagName.toLowerCase() !== "a") {
                event.preventDefault();
                if (!dropdownCooldown) {
                    const allTabs = document.getElementsByClassName("health-addFood-selectList");

                    for (var i in allTabs) {
                        console.log(allTabs.item(i).style.display);
                        if (allTabs.item(i).style.display == "block") {
                            allTabs.item(i).remove();
                        }
                    }
                }
            }

        });
        ListenersInterrupt();
        SetAspValues();
    });

</script>
<script>
    /*function arrangeJSON(dict) {
        var resultArray = []
        const weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

        var dateChecking;
        var dateChecked = [];
        console.log(dict);
        for (var i in dict) {
            // Get all the rows of same day
            dateChecking = dict[i].date;

            if (!dateChecked.includes(dateChecking)) {
                var sameDayArray = dict.filter(x => x.date == dateChecking);
                // All meals of e.g. 01/01/2022
                dateChecked.push(dateChecking);
                var sameMealArray = [[], [], []] // [[row1, row2] -- Breakfast]
                var enumMeals = [{ Breakfast: 0, Lunch: 1, Dinner: 2 }, { 0: "Breakfast", 1: "Lunch", 2: "Dinner" }]

                for (var j in sameDayArray) {
                    // Organize the rows into their meals
                    var currentDict = sameDayArray[j];
                    sameMealArray[enumMeals[0][currentDict.mealType]].push(currentDict);
                }

                var resultDict = {} // To be put into resultArray

                console.log(sameMealArray);
                for (var j in sameMealArray) {
                    var currentRows = sameMealArray[j]; // all rows r e.g. Breakfast
                    var mealString = "";

                    for (var k in currentRows) { // Run through all breakfast meals
                        var currentItem = currentRows[k]

                        mealString += currentItem.foodDetails.foodName
                        if (currentItem.quantity > 1) {
                            mealString += " x" + currentItem.quantity;
                        }
                        mealString += "<br />";
                    }

                    var resultDate = new Date(sameDayArray[0].date);
                    resultDict.Date = resultDate.toLocaleDateString("en-US") + "<br />" + weekday[resultDate.getDay()];
                    resultDict[enumMeals[1][j]] = mealString;
                    mealString = "";
                }
                resultArray.push(resultDict);
            }
            else {
                break;
            }

        }

        return resultArray
    }*/

    //var values = [];
    //for (var i = 0; i < dataArray.length; i++) {
    //    var obj = dataArray[i];

    //    var opt = document.createElement('option');
    //    opt.value = obj.category;
    //    opt.innerHTML = obj.category;
    //    if (values.includes(obj.category) == false) {
    //        select.appendChild(opt);
    //        values.push(obj.category)
    //    }

    //}
</script>

@section Scripts {
    <script src="https://unpkg.com/bootstrap-table@1.19.1/dist/bootstrap-table.min.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}